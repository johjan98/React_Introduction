Cuando usar React:
Si quieres saber cuando usar React.js y cuando no, lo primero que necesitas es conocer bien que tipo de
proyecto estás desarrollando. Solamente conociendo los alcances actuales y los futuros podrás tener un panorama 
completo de las necesidades que vas a cubrir y cuáles son las funciones básicas que debe tener para ser un MVP.

Hay dos flujos de trabajo para crear aplicaciones web.

Modelo en cascada:

  Cuando cada equipo tiene un tiempo para hacer todo su respectivo trabajo para construir una app. 
  Por ejemplo: el equipo de diseño diseña la aplicación, el de desarrollo programa todo lo diseñado y finalmente se 
  lanza la app recogiendo el feedback de los usuarios y se vuelve a empezar tomando en cuenta lo dicho por los usuarios. 
  Es problemático porque el esfuerzo puede ser en vano porque no se tiene un feedback hasta que se termina de construir 
  la app.

Modelo del ciclo MVPiterativo:

  Se refiere a que cada equipo se enfocará en ciclos pequeños para construir partes más pequeñas de una app que en 
  conjunto se puedan ir ensamblando para hacer la app completa. Resuelve el problema del modelo anterior, aquí se
  recibe el feedback al terminar cada pequeño ciclo, recibiendo así el feedback de manera más inmediata que antes.

MVPs o :

  Se refiere a construir funcionalidades pequeñas que sean completas para que podamos lanzarla y medir su impacto y 
  decidir si seguir ese camino o probar otra cosa.

  Hay que escoger el problema más crucial que debe resolver la app.

Análisis: Componentes y comportamientos.

  Componentes: Son la forma de estructurar las piezas de nuestra página web para hacerlas escalables, nos ahorran 
    tiempo y esfuerzo. Son abstracciones de los elementos de nuestra página web para ser reusados las veces que necesitemos. 
    Trabajan de manera independiente a los demás. Con React.js todos los componentes tienen una conexión con el resto de 
    componentes de la app para que en conjunto reaccionen a los comportamientos del usuario.

  Comportamiento: Las interacciones de los usuarios.

    React es muy bueno cuando queremos construir rápidamente la primera versión funcional de una app web sin sacrificar 
    su escalabilidad. Si no queremos escalarla después, no usar React.js, podemos usar JS simple.

Instalación con Create React App.

  Se pueden importar los scripts del código fuente de react directamente en el html o creando un entorno de desarrollo 
  completo con empaquetadores y otras herramientas.
  
  Hay varias versiones que podemos usar como lo son la de desarrollo o la de producción que están más optimizadas.
  
  Para hacer el ambiente de desarrollo usamos create react app, el cual podemos personalizar manualmente. En el dado caso 
  de que queramos usar una configuración predeterminada usamos npx create-react-app (npx instala temporalmente nuestras 
  herramientas para ejecutarlas y luego borrarlas, eso permite tener siempre la última versión actualizada de la herramienta 
  que queramos ejecutar). Además de esto, actualiza automáticamente los cambios hechos en el código react-scripts es la 
  configuración que hizo create-react-app por nosotros. Es un paquete que acelera el proceso de trabajo con react, 
  pero no está tan optimizado a diferencia de hacerlo manualmente. 
  div id=“root” es donde se va a renderizar el código escrito en JS con react.
  ReactDOM.render es donde enviaremos los componentes que queremos renderizar.
  Babel es el que hace la traducción que nos facilita la escritura de código de una manera más cómoda.
  npm start para ejecutar el servidor de desarrollo.

JSX: componentes vs. elementos (y props vs. atributos)
  Podemos crear componentes usando:

    class componente extends React.component : Aunque ya casi nadie usa esta forma de crear componentes.
    function App (){} : Por convención se empiezan con mayúscula.

  Se usa “className” en los elementos HTML para evitar confusión entre las clases de JS y las de HTML.
  Los componentes son invisibles para HTML pero si son visibles para React y este los puede usar para renderizar 
  de la forma más optimizada posible.
  Lo que renderiza react en HTML son los elementos.
  Usamos JSX para que con una sintaxis parecida a HTML podamos escribir de manera más entendible el código.
  Los componentes pueden tener propiedades haciendo más interactivo el componente. Por ejemplo usando props.saludo.
  Usando las propiedades podemos reutilizar un mismo componente muchas veces ahorrándonos trabajo.
  Todas las propiedades las podemos mandar de dos formas, como lo vimos en la clase
  <App saludo=“Buenas” /> o usando “children” <App>Buenaaaaaas</App>(donde podemos poner también etiquetas de HTML) y 
  usandolo con props.children

-----------------------------------------------------------------------------------------------------------------------------

Curso de React.js: Patrones de Render y Composición:

  https://funny-tibia-d59.notion.site/Patrones-de-render-en-React-f95f56f3f82b4a15925077cd1407cc6b


¿Qué es composición de componentes y colocación del estado?

  Es un patrón para crear componentes que nos da libertad para elegir dónde y cómo usamos nuestros componentes. Cada componente 
  debe cumplir una tarea muy específica pero no debe de decirnos exactamente como usar esa solución que nos provee, debe ser 
  muy flexible dándonos libertad para usar la información como queramos. Esto nos permite hacer a los componentes más fáciles de 
  integrar al resto de componentes, y agiliza el proceso de reutilizar o hacer cambios en los componentes.

  Colocación del estado:

    ¿Dónde los guardamos? Este problema también se conoce como state colocation.

    - Máxima cercanía a la relevancia: El estado debe estar tan cerca como sea posible de donde lo estemos usando y actualizando.
    - Stateful vs stateless: Separar lógica y estado de componentes que manejan UI.

  Ir de lo grande a lo específico.

  Hay que examinar que componentes manejan su propio estado, asumiendo que todos los componentes consumen el estado general 
  de la app queremos encontrar a los componentes que crean un estado aparte del general. De esta manera podemos dividir 
  componentes, de un lado tendremos a los componentes que solo consumen el estado general de la app y esos son componentes 
  stateless(de interfaz, de UI), y del otro lado a los componentes que crean su propio código interno (estado) serán los 
  stateful y siguiendo el principio de separar al estado de la UI podemos dividir a estos componentes con su propio estado 
  en 2 uno stateful, y el otro en stateless.


¿Qué son las render props y render functions?

  Nos ayudan a elevar nuestra composición de componentes a otro nivel.

  Las render props nos permiten ser más específicos sobre que vamos a renderizar, cuando y donde vamos a renderizar cada 
  parte del contenido de nuestros componentes.

  Render Function:
    Es el patrón de entregar la información de nuestro componente en una función. No es exclusivo de react context, nosotros 
    podemos crear nuestros propios componentes que usen este patrón, que reciban una función para que le podamos enviar la 
    información que queremos proveer y luego si, renderizar los componentes que ya tienen la info gracias a la función.

  Render Props:
    Cuando ya no mandamos la función dentro del componente, si no que la enviamos en alguna otra propiedad del componente. 
    Podemos jugar con este patrón para que compartir información sea más divertido.


React.Children y React.cloneElement:
  
  React.cloneElement:

    Con esta característica de React podemos crear elementos de Nodos React.
    Cabe aclarar que esta funciona con un unico nodo, en caso de aplicarla en un conjunto de los mismos podemos ayudarnos 
    de React.Children.

  React.Children

    Nos permite manipular la prop children entre uno de sus usos podemos volver un conjunto de nodos react a un array.


Qué son los High Order Components:

  Las funciones como las conocemos pueden devolvernos un valor en sus returns, pero estas funciones de “orden superior”, 
  son funciones que devuelven otras funciones.

  Si llamamos a la high order function y le enviamos un parámetro no tendremos todavía un resultado, como está devolviendo 
  otra función tenemos que llamar a esa función que obtenemos luego de llamar a la de orden superior, enviarle los nuevos 
  parámetros que necesita la función de retorno y entonces si, obtendremos nuestro resultado.


Render props vs. High Order Components vs. React Hooks:
  
  Maquetación:
    Render props o render functions vs React hooks

    - Ambas son formas correctas de trabajar y comunes.
    - Las render props suben el nivel de elegancia del código pero también pueden bajar el nivel de código aburrido comparado 
      con los react hooks.
    - Si practicamos mucho podremos usar las render props de manera mucho más saludable para los componentes más estructuralmente 
      importantes de nuestras apps. Nos ayudan a proteger nuestros componentes para que no nos equivoquemos y la maquetación sea 
      correcta.
  
  Share data, compartir información entre componentes:

    Aquí participan todos los patrones:
      
      Render Functions:
      - Compartir info con funciones que en sus parámetros nos dejan esa info que necesitamos que nos compartieran.
      - Si necesitamos demasiada info de distintas render functions para un mismo componente deja de verse bien y podría 
        llegar al código spaghetti.
  
      HOC:
      - Funciones que pueden retornar y retornar y retornar otras funciones hasta que en algún momento retornemos un componente 
        de react y podamos pasarle toda la info.
      - Usarlos es sencillo, envolvemos nuestros componentes en estos HOC y automáticamente van a recibir toda la info que nos 
        querían compartir estos HOC.
      - Si necesitamos la info de muchos HOC’S en un mismo componente tenemos el mismo problema que con las render functions. 
        Código muy horizontal.
  
      React hooks:
      - Llamamos al react hook (oficial o custom) y luego consumimos la info en el return del componente.
      - Cuando tenemos muchos llamados a distintos react hooks no hay código horizontal.
      - Ganaron los hooks para compartir info entre varios componentes.